{"pages":[{"title":"about","text":"this is just a demo of about","link":"/about/index.html"},{"title":"Build the blog with hexo","text":"My work mainly follows the instruction on https://www.simon96.online/2018/10/12/hexo-tutorial/ 1. prepared workinstall nodejs/ git 2. install hexo command line1$ npm install -g hexo-cli 3. init the folder for hexo123$ hexo init &lt;folder&gt; # generate the hexo folder$ cd &lt;folder&gt;$ npm install # npm will download and install according to the dependency configuration in the package.json configuration file 4. start the server1$ hexo s Then open the link http://localhost:4000/ to check whether the blog can run in localhost 5.publish my blog on a remote addresschoose github pages and purchased domain new a repososity name &lt;githubname&gt;.github.io also set the original hexo folder as &lt;githubname&gt;.github.io install hexo-deployer-git plugin modifiy the configuration file named _config.yml1234deploy: type: git repo: git@github.com:&lt;Github account name&gt;/&lt;the repososity we created before&gt; branch: master generate new pages and push them to remote12$ hexo g$ hexo d now we can visit our blog on https://.github.io buy a domain on Godaddy set the DNS as follows create a file named CNAME under source folderand inside the file, write my domain and use command to push the modified to github files wait some miniutes then I could visit my website on my domain 6.change the theme of hexochoose the theme named icarus and its github link ishttps://github.com/ppoffice/hexo-theme-icarus.Put the downloaded folder under the themes folder. And change the setting of the whole hexo project in _config.yml and change the setting of the theme in the themes/hexo-theme-icarus/_config.yml.The main changes In the _config.yml set title, author and time zone 1234567title: lawilet's websitesubtitle: ''description: ''keywords:author: lawiet019language: entimezone: 'America/New_York' set the theme 1theme: hexo-theme-icarus In the themes/hexo-theme-icarus/_config.yml change the logo and favicon 12345logo: /img/favicon.png# Page metadata configurationshead: # URL or path to the website's icon favicon: /img/favicon.png Also change the settings in the widgets labels like the link to github. block the comments,payment and so on. And remember to generate and deploy again. 7. add about page install the hexo-admin1npm install --save hexo-admin enter the admin address like localhost:4000/admin create a new page named about remaining problems: comments plugin: I tried the gitalk. But sincemy domain didnot support https so it doesnot work.","link":"/Build-the-blog-with-hexo/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/05/09/hello-world/"},{"title":"Build the blog with hexo","text":"My work mainly follows the instruction on https://www.simon96.online/2018/10/12/hexo-tutorial/ 1. prepared workinstall nodejs/ git 2. install hexo command line1$ npm install -g hexo-cli 3. init the folder for hexo123$ hexo init &lt;folder&gt; # generate the hexo folder$ cd &lt;folder&gt;$ npm install # npm will download and install according to the dependency configuration in the package.json configuration file 4. start the server1$ hexo s Then open the link http://localhost:4000/ to check whether the blog can run in localhost 5.publish my blog on a remote addresschoose github pages and purchased domain new a repososity name &lt;githubname&gt;.github.io also set the original hexo folder as &lt;githubname&gt;.github.io install hexo-deployer-git plugin modifiy the configuration file named _config.yml1234deploy: type: git repo: git@github.com:&lt;Github account name&gt;/&lt;the repososity we created before&gt; branch: master generate new pages and push them to remote12$ hexo g$ hexo d now we can visit our blog on https://.github.io buy a domain on Godaddy set the DNS as follows create a file named CNAME under source folderand inside the file, write my domain and use command to push the modified to github files wait some miniutes then I could visit my website on my domain 6.change the theme of hexochoose the theme named icarus and its github link ishttps://github.com/ppoffice/hexo-theme-icarus.Put the downloaded folder under the themes folder. And change the setting of the whole hexo project in _config.yml and change the setting of the theme in the themes/hexo-theme-icarus/_config.yml.The main changes In the _config.yml set title, author and time zone 1234567title: lawilet's websitesubtitle: ''description: ''keywords:author: lawiet019language: entimezone: 'America/New_York' set the theme 1theme: hexo-theme-icarus In the themes/hexo-theme-icarus/_config.yml change the logo and favicon 12345logo: /img/favicon.png# Page metadata configurationshead: # URL or path to the website's icon favicon: /img/favicon.png Also change the settings in the widgets labels like the link to github. block the comments,payment and so on. And remember to generate and deploy again. 7. add about page install the hexo-admin1npm install --save hexo-admin enter the admin address like localhost:4000/admin create a new page named about remaining problems: comments plugin: I tried the gitalk. But sincemy domain didnot support https so it doesnot work.","link":"/2020/05/12/Build-the-blog-with-hexo/"},{"title":"sorting alogrithms in python","text":"The materials are based on geekforgeek and https://www.cnblogs.com/onepixel/articles/7674659.html bubble sortBubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order.If we rank n elements, we need n-1 comparisons, so K comparisons need n-k comparisons.The comparison times are: (n-1) + (n-2) +â€¦ + 1 = n * (n-1) / 2, so the time complexity of bubble sorting is O (n ^ 2).The worse case and average are both O (n ^ 2)best case is O(n) (if we use flag)Space complexity: 1 Algorithm Introduction: Compare adjacent elements, the former is larger than the latter (or the former is smaller than the latter) and change positions Repeat the work for each pair of adjacent elements from the beginning to the end. After this step is completed, the end is the largest or smallest number Repeat the above steps for the last element. Repeat steps 1-3 until sorting is completed to implement it in Python 12345678910111213141516171819# increasing orderdef bubbleSort(aList): n = len(aList) for i in range(n-1): # the index of loop for j in range(1,n-i): # the index of element if aList[j]&lt; aList[j-1]: aList[j],aList[j-1] = aList[j-1],aList[j] return aListdef bubbleSortWithFlag(aList): n = len(aList) for i in range(n-1): # the index of loop flag = False for j in range(1,n-i): # the index of element if aList[j]&lt; aList[j-1]: flag = True aList[j],aList[j-1] = aList[j-1],aList[j] if not flag: return aList selection sortThe selection sort algorithm sorts an array by repeatedly finding the minimum element (considering ascending order) from unsorted part and putting it at the beginning. The algorithm maintains two subarrays in a given array. 1) The subarray which is already sorted.2) Remaining subarray which is unsorted. In every iteration of selection sort, the minimum element (considering ascending order) from the unsorted subarray is picked and moved to the sorted subarray. Algorithm Introduction: the smallest (large) element is found in the unsorted sequence and stored at the beginning of the sorted sequence ( we can still use the original array as the sorted sequence by swapping). continue to find the smallest (largest) element from the remaining unsorted elements, and put it at the end of the sorted sequence.Repeat the second step until all elements are sorted. Worst complexity: O(n^2)Average complexity:O(n^2)Best complexity: O(n^2)Space complexity: O(1) 12345678910111213def selectionSort(aList): n = len(aList) for i in range(n-1): for j in range(i,n): if j ==i: small_value = aList[j] small_index = j else: if aList[j] &lt; small_value: small_value = aList[j] small_index = j aList[i],aList[small_index] = aList[small_index],aList[i] return aList Insertion SortThe idea of insertion sorting is to maintain an ordered area and insert data one by one into the proper position of the ordered area until the whole array is ordered.Generally speaking, insertion sorting is implemented on array by in place. The specific algorithm is described as follows: Algorithm Introduction: Starting from the first element, the element can be considered to have been sorted; Take out the next element and scan from the back to the front in the sorted element sequence; If the element (sorted) is larger than the new element, move the element to the next location; Repeat step 3 until the ordered element is less than or equal to the position of the new element; After inserting the new element into the location;Repeat steps 2-5. Worst complexity: n^2Average complexity: n^2Best complexity: nSpace complexity: 1 123456789101112def insertionSort(aList): n = len(aList) for i in range(1,n): # save the index and value of i temp = aList[i] j =i # find the location to put i while j&gt;0 and aList[j-1]&gt; temp: aList[j] = aList[j-1] j -=1 aList[j] = temp return aList shell sortshell sort is also called reduced incremental sort. Its essence is insertion sort. It just divides the sequence to be sorted into several subsequences according to some rules, and directly inserts and sorts these subsequences respectively. The embodiment of this rule is the selection of increment. If the selected increment is 1, then it is insertion sort. And each sorting of shell sort will make the whole sequence orderly. When the whole sequence is orderly, then insert sort with increment of 1 will improve the sorting efficiency.The commonly used increment is 2-span increment, so every time you sort, the increment is half of the last one, which is what we often call shell increment. Algorithm Introduction: Select an incremental sequence t1, t2 , tk, where ti &gt; tj, tk = 1; By the number k of incremental sequence, the sequence is sorted by k times; According to the corresponding increment ti, the sequence to be sorted is divided into several subsequences with length of m, and each subsequence is inserted and sorted directly. Only when the increment factor is 1, the whole sequence is treated as a table, and the table length is the length of the whole sequence. time complexity:O(nlogn)ï½žO(n^2)space complexity: O(1) 12345678910111213141516def shellSort(aList): n = len(aList) # init gap gap = n//2 while gap &gt;=1: print(gap) # do the insertion sort based on different gaps for i in range(gap,n): temp = aList[i] j =i while j&gt;= gap and aList[j-gap]&gt;temp: aList[j] = aList[j-gap] j = j-gap aList[j] = temp gap = gap //2 return aList merge sortMerge sort is a divide and conquer algorithm. First divide the list into the smallest unit (1 element), then compare each element with the adjacent list to sort and merge the two adjacent lists. Finally all the elements are sorted. Algorithm Introduction: The input sequence of length n is divided into two subsequences of length n / 2; The two subsequences are sorted by merging; Merge two sorted subsequences into a final sorting sequence. Worst complexity: nlog(n)Average complexity: nlog(n)Best complexity: n*log(n)Space complexity: n 123456789101112131415161718192021222324252627282930313233def merge(a,b): ret_list = [] a_i = 0 b_i =0 len_a = len(a) len_b = len(b) while a_i&lt;= len_a -1 and b_i&lt;= len_b -1: if a[a_i]&lt;= b[b_i]: ret_list.append(a[a_i]) a_i = a_i+1 else: ret_list.append(b[b_i]) b_i = b_i+1 while a_i &lt;=len_a -1: ret_list.append(a[a_i]) a_i = a_i+1 while b_i &lt;=len_b -1: ret_list.append(b[b_i]) b_i = b_i+1 return ret_listdef mergeSort(aList): n = len(aList) # divide n into two parts if n &gt;=2: mid = n//2 left = mergeSort(aList[:mid]) right =mergeSort(aList[mid:]) # merge it finally return merge(left,right) else: return aList quick sortQuickSort is a Divide and Conquer algorithm. It picks an element as pivot and partitions the given array around the picked pivot. There are many different versions of quickSort that pick pivot in different ways. Always pick first element as pivot. Always pick last element as pivot (implemented below) Pick a random element as pivot. Pick median as pivot. The key process in quickSort is partition(). Target of partitions is, given an array and an element x of array as pivot, put x at its correct position in sorted array and put all smaller elements (smaller than x) before x, and put all greater elements (greater than x) after x. All this should be done in linear time. Worst complexity: n^2Average complexity: nlog(n)Best complexity: nlog(n) 1234567891011121314151617def quickSort(aList): # choose the first element as pivot if len(aList)&lt;=1: return aList pivot = aList[0] left = [] right = [] for i in range(1,len(aList)): if aList[i]&lt;pivot: left.append(aList[i]) else: right.append(aList[i]) left = quickSort(left) right = quickSort(right) left.append(pivot) left.extend(right) return left heap sortHeap sort is a comparison based sorting technique based on Binary Heap data structure. It is similar to selection sort where we first find the maximum element and place the maximum element at the end. We repeat the same process for remaining element. What is Binary Heap?Let us first define a Complete Binary Tree. A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible (Source Wikipedia) A Binary Heap is a Complete Binary Tree where items are stored in a special order such that value in a parent node is greater(or smaller) than the values in its two children nodes. The former is called as max heap and the latter is called min heap. The heap can be represented by binary tree or array. Why array based representation for Binary Heap?Since a Binary Heap is a Complete Binary Tree, it can be easily represented as array and array based representation is space efficient. If the parent node is stored at index I, the left child can be calculated by 2 * I + 1 and right child by 2 * I + 2 (assuming the indexing starts at 0). Heap Sort Algorithm for sorting in increasing order: Build a max heap from the input data. At this point, the largest item is stored at the root of the heap. Replace it with the last item of the heap followed by reducing the size of heap by 1. Finally, heapify the root of tree. Repeat above steps while size of heap is greater than 1. How to build the heap?Heapify procedure can be applied to a node only if its children nodes are heapified. So the heapification must be performed in the bottom up order. Lets understand with the help of an example: 12345678910111213141516171819202122232425Input data: 4, 10, 3, 5, 1 4(0) / \\ 10(1) 3(2) / \\ 5(3) 1(4)The numbers in bracket represent the indices in the arrayrepresentation of data.Applying heapify procedure to index 1: 4(0) / \\ 10(1) 3(2) / \\5(3) 1(4)Applying heapify procedure to index 0: 10(0) / \\ 5(1) 3(2) / \\ 4(3) 1(4)The heapify procedure calls itself recursively to build heap in top down manner. Worst complexity: nlog(n)Average complexity: nlog(n)Best complexity: n*log(n)Space complexity: 1 we will start our heapify on the the last non-leaf node. To get it, we know that the index value of the last leaf node is n-1, and its parent node index value is [(n-1) - 1] / 2 = n / 2 - 1. And after we build a max heap, More detail Explanation on heap sort is https://www.cnblogs.com/chengxiao/p/6129630.html 12345678910111213141516171819202122def heapify(aList,n,i): left = 2*i + 1 right = 2*i +2 largest = i if left&lt;n and aList[left]&gt;aList[largest]: largest = left if right&lt;n and aList[right]&gt;aList[largest]: largest = right if largest != i: aList[largest],aList[i] = aList[i],aList[largest] heapify(aList,n,largest)def heapSort(aList): n = len(aList) #build the max heap for i in range(n//2 -1,-1,-1): heapify(aList,n,i) # get the element based on the order (from the root) for i in range(n-1,0,-1): aList[0],aList[i] = aList[i],aList[0] heapify(aList,i,0) return aList counting sortIt is applicable to a certain range of integer sorting. When the value range is not very large, its performance is even faster than those o (nlogn) sorting in some cases, such as fast sorting and merging sorting.Let us understand it with the help of an example 12345678910111213141516171819For simplicity, consider the data in the range 0 to 9.Input data: 1, 4, 1, 2, 7, 5, 2 1) Take a count array to store the count of each unique object. Index: 0 1 2 3 4 5 6 7 8 9 Count: 0 2 2 0 1 1 0 1 0 0 2) Modify the count array such that each element at each index stores the sum of previous counts. Index: 0 1 2 3 4 5 6 7 8 9 Count: 0 2 4 4 5 6 6 7 7 7The modified count array indicates the position of each object inthe output sequence. 3) Output each object from the input sequence followed by decreasing its count by 1. Process the input data: 1, 4, 1, 2, 7, 5, 2. Position of 1 is 2. Put data 1 at index 2 in output. Decrease count by 1 to place next data 1 at an index 1 smaller than this index. 12345678910111213141516def countingSort(aList): min_v = min(aList) max_v = max(aList) rag = max_v - min_v +1 n = len(aList) num_counter = {} for i in range(rag): num_counter[min_v+i] = 0 for i in range(n): num_counter[aList[i]] +=1 ret_list = [] for i in range(rag): ret_list.extend([min_v+i]*num_counter[min_v+ i]) return ret_list bucket sortBucket Sort is a sorting technique that sorts the elements by first dividing the elements into several groups called buckets. The elements inside each bucket are sorted using any of the suitable sorting algorithms or recursively calling the same algorithm.bucketSort(arr[], n) 1) Create n empty buckets (Or lists).2) Do following for every array element arr[i].â€¦â€¦.a) Insert arr[i] into bucket[n*array[i]]3) Sort individual buckets using insertion sort.4) Concatenate all sorted buckets. If we assume that insertion in a bucket takes O(1) time then steps 1 and 2 of the above algorithm clearly take O(n) time. The O(1) is easily possible if we use a linked list to represent a bucket (In the following code, C++ vector is used for simplicity). Step 4 also takes O(n) time as there will be n items in all buckets. 123456789101112131415161718192021222324252627282930313233def insertionSort(b): for i in range(1, len(b)): up = b[i] j = i - 1 while j &gt;=0 and b[j] &gt; up: b[j + 1] = b[j] j -= 1 b[j + 1] = up return b def bucketSort(x): arr = [] slot_num = 10 # 10 means 10 slots, each # slot's size is 0.1 for i in range(slot_num): arr.append([]) # Put array elements in different buckets for j in x: index_b = int(slot_num * j) arr[index_b].append(j) # Sort individual buckets for i in range(slot_num): arr[i] = insertionSort(arr[i]) # concatenate the result k = 0 for i in range(slot_num): for j in range(len(arr[i])): x[k] = arr[i][j] k += 1 return x Radix SortRadix sort is an extension of bucket sort. Its basic idea is to cut integers into different numbers according to the number of digits, and then compare them according to each digit.The specific method is: unify all the values to be compared into the same digit length, and fill zero in front of the shorter digit. Then, start from the lowest order and sort one by one. In this way, from the lowest ranking to the completion of the highest ranking, the sequence becomes an ordered sequence. Algorithm Introduction: Gets the maximum number in the array and the number of digits of the maximun number ; if arr is the original array, and each bit is taken from the lowest bit to form a radix array; To count and sort the radix (use counting sort); 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647def countingSort(arr, exp1): n = len(arr) # The output array elements that will have sorted arr output = [0] * (n) # initialize count array as 0 count = [0] * (10) # Store count of occurrences in count[] for i in range(0, n): index = (arr[i]/exp1) count[ (index)%10 ] += 1 # Change count[i] so that count[i] now contains actual # position of this digit in output array for i in range(1,10): count[i] += count[i-1] # Build the output array i = n-1 while i&gt;=0: index = (arr[i]/exp1) output[ count[ (index)%10 ] - 1] = arr[i] count[ (index)%10 ] -= 1 i -= 1 # Copying the output array to arr[], # so that arr now contains sorted numbers i = 0 for i in range(0,len(arr)): arr[i] = output[i]# Method to do Radix Sortdef radixSort(arr): # Find the maximum number to know number of digits max1 = max(arr) # Do counting sort for every digit. Note that instead # of passing digit number, exp is passed. exp is 10^i # where i is current digit number exp = 1 while max1/exp &gt; 0: countingSort(arr,exp) exp *= 10 ###The analysis of sorting algorithmshttps://www.geeksforgeeks.org/analysis-of-different-sorting-techniques/","link":"/2020/05/23/sorting-alogrithms-in-python/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"}],"categories":[{"name":"technology","slug":"technology","link":"/categories/technology/"}]}